<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="string_8h" kind="file" language="C++">
    <compoundname>string.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">algorithm</includes>
    <includedby refid="tsplib_8h" local="yes">src/tsplib.h</includedby>
    <incdepgraph>
      <node id="85">
        <label>string</label>
      </node>
      <node id="86">
        <label>algorithm</label>
      </node>
      <node id="84">
        <label>src/string.h</label>
        <link refid="string_8h"/>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="88">
        <label>src/tsplib.h</label>
        <link refid="tsplib_8h"/>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>src/oplib.h</label>
        <link refid="oplib_8h"/>
      </node>
      <node id="87">
        <label>src/string.h</label>
        <link refid="string_8h"/>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceas">as</innernamespace>
    <innernamespace refid="namespacestring">string</innernamespace>
    <innernamespace refid="namespaceas_1_1string">as::string</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>alberto<sp/>on<sp/>21/11/17.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>AS_STRING_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AS_STRING_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceas" kindref="compound">as</ref><sp/>{</highlight></codeline>
<codeline lineno="15" refid="namespaceas_1_1string" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestring" kindref="compound">string</ref><sp/>{</highlight></codeline>
<codeline lineno="20" refid="namespaceas_1_1string_1a608048dc1f3a08c88ad0f5ff87b58c1d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceas_1_1string_1a608048dc1f3a08c88ad0f5ff87b58c1d" kindref="member">left_trim</ref>(std::string&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.erase(s.begin(),<sp/>std::find_if(s.begin(),<sp/>s.end(),<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!std::isspace(ch);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="namespaceas_1_1string_1a748afb440479e4824710ab07d92cbe68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceas_1_1string_1a748afb440479e4824710ab07d92cbe68" kindref="member">right_trim</ref>(std::string&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.erase(std::find_if(s.rbegin(),<sp/>s.rend(),<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!std::isspace(ch);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}).base(),<sp/>s.end());</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="namespaceas_1_1string_1aa654dd12f0ebc738431eee149e2a8242" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceas_1_1string_1aa654dd12f0ebc738431eee149e2a8242" kindref="member">trim</ref>(std::string&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceas_1_1string_1a608048dc1f3a08c88ad0f5ff87b58c1d" kindref="member">left_trim</ref>(s);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceas_1_1string_1a748afb440479e4824710ab07d92cbe68" kindref="member">right_trim</ref>(s);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//AS_STRING_H</highlight></codeline>
    </programlisting>
    <location file="src/string.h"/>
  </compounddef>
</doxygen>
