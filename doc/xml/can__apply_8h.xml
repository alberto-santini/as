<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="can__apply_8h" kind="file" language="C++">
    <compoundname>can_apply.h</compoundname>
    <includes local="no">type_traits</includes>
    <includedby refid="containers_8h" local="yes">src/containers.h</includedby>
    <incdepgraph>
      <node id="6">
        <label>src/can_apply.h</label>
        <link refid="can__apply_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="10">
        <label>src/random.h</label>
        <link refid="random_8h"/>
      </node>
      <node id="8">
        <label>src/can_apply.h</label>
        <link refid="can__apply_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>src/containers.h</label>
        <link refid="containers_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structas_1_1tmp_1_1types" prot="public">as::tmp::types</innerclass>
    <innerclass refid="structas_1_1tmp_1_1details_1_1can__apply" prot="public">as::tmp::details::can_apply</innerclass>
    <innerclass refid="structas_1_1tmp_1_1details_1_1can__apply_3_01Z_00_01types_3_01Ts_8_8_8_01_4_00_01std_1_1void__t_d0380c4f39b26cf3dcf2ed45500ba357" prot="public">as::tmp::details::can_apply&lt; Z, types&lt; Ts... &gt;, std::void_t&lt; Z&lt; Ts... &gt; &gt; &gt;</innerclass>
    <innernamespace refid="namespaceas">as</innernamespace>
    <innernamespace refid="namespacetmp">tmp</innernamespace>
    <innernamespace refid="namespaceas_1_1tmp">as::tmp</innernamespace>
    <innernamespace refid="namespaceas_1_1tmp_1_1details">as::tmp::details</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>alberto<sp/>on<sp/>16/10/17.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>AS_CAN_APPLY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AS_CAN_APPLY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceas" kindref="compound">as</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>following<sp/>is<sp/>TMP<sp/>magic<sp/>used<sp/>to<sp/>see<sp/>if<sp/>some<sp/>template<sp/>is<sp/>a<sp/>valid<sp/>expression.<sp/>See:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>https://stackoverflow.com/questions/29521010/enable-template-function-if-class-has-specific-member-function</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="namespaceas_1_1tmp" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetmp" kindref="compound">tmp</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...&gt;</highlight></codeline>
<codeline lineno="21" refid="structas_1_1tmp_1_1types" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structas_1_1tmp_1_1types" kindref="compound">types</ref><sp/>{</highlight></codeline>
<codeline lineno="22" refid="structas_1_1tmp_1_1types_1a8fee0852270845709fbb995347ac8fa3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structas_1_1tmp_1_1types" kindref="compound">type</ref><sp/>=<sp/><ref refid="structas_1_1tmp_1_1types" kindref="compound">types</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="namespaceas_1_1tmp_1_1details" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">details<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Z,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="structas_1_1tmp_1_1types" kindref="compound">types</ref>,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">=</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="27" refid="structas_1_1tmp_1_1details_1_1can__apply" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structas_1_1tmp_1_1details_1_1can__apply" kindref="compound">can_apply</ref><sp/>:<sp/>std::false_type<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Z,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...Ts&gt;</highlight></codeline>
<codeline lineno="31" refid="structas_1_1tmp_1_1details_1_1can__apply_3_01Z_00_01types_3_01Ts_8_8_8_01_4_00_01std_1_1void__t_d0380c4f39b26cf3dcf2ed45500ba357" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structas_1_1tmp_1_1details_1_1can__apply" kindref="compound">can_apply</ref>&lt;Z,<sp/>types&lt;Ts...&gt;,<sp/>std::void_t&lt;Z&lt;Ts...&gt;&gt;&gt;<sp/>:<sp/>std::true_type<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Z,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...Ts&gt;</highlight></codeline>
<codeline lineno="45" refid="namespaceas_1_1tmp_1a44a275bd3c66d727fb1b6f0179d49e19" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structas_1_1tmp_1_1details_1_1can__apply" kindref="compound">can_apply</ref><sp/>=<sp/><ref refid="structas_1_1tmp_1_1details_1_1can__apply" kindref="compound">details::can_apply</ref>&lt;Z,<sp/><ref refid="structas_1_1tmp_1_1types" kindref="compound">types</ref>&lt;Ts...&gt;&gt;;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//AS_CAN_APPLY_H</highlight></codeline>
    </programlisting>
    <location file="src/can_apply.h"/>
  </compounddef>
</doxygen>
