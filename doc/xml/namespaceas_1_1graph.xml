<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceas_1_1graph" kind="namespace" language="C++">
    <compoundname>as::graph</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceas_1_1graph_1ab93ee208eb116d3a3349c8de8cc91445" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BoostGraph</type>
          </param>
        </templateparamlist>
        <type><ref refid="classas_1_1iterator__pair" kindref="compound">iterator_pair</ref>&lt; typename boost::graph_traits&lt; BoostGraph &gt;::vertex_iterator &gt;</type>
        <definition>iterator_pair&lt;typename boost::graph_traits&lt;BoostGraph&gt;::vertex_iterator&gt; as::graph::vertices</definition>
        <argsstring>(const BoostGraph &amp;graph)</argsstring>
        <name>vertices</name>
        <param>
          <type>const BoostGraph &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>Gives an <ref refid="classas_1_1iterator__pair" kindref="compound">iterator_pair</ref> that can be used in range-based for loops to cycle through the vertices of a graph. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BoostGraph</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying graph type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classas_1_1iterator__pair" kindref="compound">iterator_pair</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/graph.h" line="26" column="1" bodyfile="src/graph.h" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceas_1_1graph_1ae44b728c4acaf47bc2bb010831df9452" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BoostGraph</type>
          </param>
        </templateparamlist>
        <type><ref refid="classas_1_1iterator__pair" kindref="compound">iterator_pair</ref>&lt; typename boost::graph_traits&lt; BoostGraph &gt;::edge_iterator &gt;</type>
        <definition>iterator_pair&lt;typename boost::graph_traits&lt;BoostGraph&gt;::edge_iterator&gt; as::graph::edges</definition>
        <argsstring>(const BoostGraph &amp;graph)</argsstring>
        <name>edges</name>
        <param>
          <type>const BoostGraph &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>Gives an <ref refid="classas_1_1iterator__pair" kindref="compound">iterator_pair</ref> that can be used in range-based for loops to cycle through the edges of a graph. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BoostGraph</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying graph type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classas_1_1iterator__pair" kindref="compound">iterator_pair</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/graph.h" line="38" column="1" bodyfile="src/graph.h" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceas_1_1graph_1a00143e178e97f0e9787802953d74a9f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BoostGraph</type>
          </param>
        </templateparamlist>
        <type><ref refid="classas_1_1iterator__pair" kindref="compound">iterator_pair</ref>&lt; typename boost::graph_traits&lt; BoostGraph &gt;::out_edge_iterator &gt;</type>
        <definition>iterator_pair&lt;typename boost::graph_traits&lt;BoostGraph&gt;::out_edge_iterator&gt; as::graph::out_edges</definition>
        <argsstring>(const typename boost::graph_traits&lt; BoostGraph &gt;::vertex_descriptor &amp;vertex, const BoostGraph &amp;graph)</argsstring>
        <name>out_edges</name>
        <param>
          <type>const typename boost::graph_traits&lt; BoostGraph &gt;::vertex_descriptor &amp;</type>
          <declname>vertex</declname>
        </param>
        <param>
          <type>const BoostGraph &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>Gives an <ref refid="classas_1_1iterator__pair" kindref="compound">iterator_pair</ref> that can be used in range-based for loops to cycle through the out-edges of a vertex of a graph. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BoostGraph</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying graph type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertex. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classas_1_1iterator__pair" kindref="compound">iterator_pair</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/graph.h" line="51" column="1" bodyfile="src/graph.h" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespaceas_1_1graph_1ab75a465b1d5869f0ea8b698f02b067aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BoostGraph</type>
          </param>
        </templateparamlist>
        <type><ref refid="classas_1_1iterator__pair" kindref="compound">iterator_pair</ref>&lt; typename boost::graph_traits&lt; BoostGraph &gt;::in_edge_iterator &gt;</type>
        <definition>iterator_pair&lt;typename boost::graph_traits&lt;BoostGraph&gt;::in_edge_iterator&gt; as::graph::in_edges</definition>
        <argsstring>(const typename boost::graph_traits&lt; BoostGraph &gt;::vertex_descriptor &amp;vertex, const BoostGraph &amp;graph)</argsstring>
        <name>in_edges</name>
        <param>
          <type>const typename boost::graph_traits&lt; BoostGraph &gt;::vertex_descriptor &amp;</type>
          <declname>vertex</declname>
        </param>
        <param>
          <type>const BoostGraph &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>Gives an <ref refid="classas_1_1iterator__pair" kindref="compound">iterator_pair</ref> that can be used in range-based for loops to cycle through the in-edges of a vertex of a graph. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BoostGraph</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying graph type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertex. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classas_1_1iterator__pair" kindref="compound">iterator_pair</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/graph.h" line="67" column="1" bodyfile="src/graph.h" bodystart="67" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceas_1_1graph_1a7a86ebb168cf6ac390a5bd86d3380350" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BoostGraph</type>
          </param>
        </templateparamlist>
        <type><ref refid="classas_1_1iterator__pair" kindref="compound">iterator_pair</ref>&lt; typename boost::graph_traits&lt; BoostGraph &gt;::adjacency_iterator &gt;</type>
        <definition>iterator_pair&lt;typename boost::graph_traits&lt;BoostGraph&gt;::adjacency_iterator&gt; as::graph::neighbours</definition>
        <argsstring>(const typename boost::graph_traits&lt; BoostGraph &gt;::vertex_descriptor &amp;vertex, const BoostGraph &amp;graph)</argsstring>
        <name>neighbours</name>
        <param>
          <type>const typename boost::graph_traits&lt; BoostGraph &gt;::vertex_descriptor &amp;</type>
          <declname>vertex</declname>
        </param>
        <param>
          <type>const BoostGraph &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>Gives an <ref refid="classas_1_1iterator__pair" kindref="compound">iterator_pair</ref> that can be used in range-based for loops to cycle through the vertices adjacent to a given vertex, in an undirected graph. </para>        </briefdescription>
        <detaileddescription>
<para>Unlike boost::adjacent_vertices, this function statically checks that the graph is undirected.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BoostGraph</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying graph type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertex. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classas_1_1iterator__pair" kindref="compound">iterator_pair</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/graph.h" line="86" column="1" bodyfile="src/graph.h" bodystart="86" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespaceas_1_1graph_1ac0b52ec1e242ac547157a42aac39e21a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BoostGraph</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool as::graph::incident_to_the_same_vertex</definition>
        <argsstring>(const typename boost::graph_traits&lt; BoostGraph &gt;::edge_descriptor &amp;edge1, const typename boost::graph_traits&lt; BoostGraph &gt;::edge_descriptor &amp;edge2, const BoostGraph &amp;graph)</argsstring>
        <name>incident_to_the_same_vertex</name>
        <param>
          <type>const typename boost::graph_traits&lt; BoostGraph &gt;::edge_descriptor &amp;</type>
          <declname>edge1</declname>
        </param>
        <param>
          <type>const typename boost::graph_traits&lt; BoostGraph &gt;::edge_descriptor &amp;</type>
          <declname>edge2</declname>
        </param>
        <param>
          <type>const BoostGraph &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>Tells whether two edges of an undirected graph are incident to at least one common vertex. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BoostGraph</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying graph type. Must be undirected. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>edge1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first edge. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second edge. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True iff the two edges are incident to at least on common vertex. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/graph.h" line="107" column="1" bodyfile="src/graph.h" bodystart="107" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceas_1_1graph_1af020abed3b5b57f984d8ce940ee6f4cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BoostGraph</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool as::graph::is_extreme</definition>
        <argsstring>(const typename boost::graph_traits&lt; BoostGraph &gt;::vertex_descriptor &amp;vertex, const typename boost::graph_traits&lt; BoostGraph &gt;::edge_descriptor &amp;edge, const BoostGraph &amp;graph)</argsstring>
        <name>is_extreme</name>
        <param>
          <type>const typename boost::graph_traits&lt; BoostGraph &gt;::vertex_descriptor &amp;</type>
          <declname>vertex</declname>
        </param>
        <param>
          <type>const typename boost::graph_traits&lt; BoostGraph &gt;::edge_descriptor &amp;</type>
          <declname>edge</declname>
        </param>
        <param>
          <type>const BoostGraph &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>Tells whether a vertex is an extreme of an edge, i.e. if it is either its source or its target. For an undirected graph, therefore, it tells whether the edge is incident to the vertex. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BoostGraph</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying graph type. Can be both directed or undirected. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertex. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>The edge. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True iff the vertex is an extreme of the edge. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/graph.h" line="137" column="1" bodyfile="src/graph.h" bodystart="137" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceas_1_1graph_1a592c192d63c1c42820da78708adb9e61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BoostGraph</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; BoostGraph &gt;::vertex_descriptor</type>
        <definition>boost::graph_traits&lt;BoostGraph&gt;::vertex_descriptor as::graph::other_extreme</definition>
        <argsstring>(const typename boost::graph_traits&lt; BoostGraph &gt;::vertex_descriptor &amp;vertex, const typename boost::graph_traits&lt; BoostGraph &gt;::edge_descriptor &amp;edge, const BoostGraph &amp;graph)</argsstring>
        <name>other_extreme</name>
        <param>
          <type>const typename boost::graph_traits&lt; BoostGraph &gt;::vertex_descriptor &amp;</type>
          <declname>vertex</declname>
        </param>
        <param>
          <type>const typename boost::graph_traits&lt; BoostGraph &gt;::edge_descriptor &amp;</type>
          <declname>edge</declname>
        </param>
        <param>
          <type>const BoostGraph &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>Given an edge and a vertex which is one of the two extremes of the edge, it returns the other extreme. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BoostGraph</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying graph type. Can be both directed or undirected. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertex. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>The edge. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The other extreme of the edge. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/graph.h" line="155" column="1" bodyfile="src/graph.h" bodystart="155" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespaceas_1_1graph_1aec6bce35a79299f552d227442f399580" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BoostGraph</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; typename boost::graph_traits&lt; BoostGraph &gt;::vertex_descriptor &gt;</type>
        <definition>std::vector&lt;typename boost::graph_traits&lt;BoostGraph&gt;::vertex_descriptor&gt; as::graph::vertex_complement</definition>
        <argsstring>(std::vector&lt; typename boost::graph_traits&lt; BoostGraph &gt;::vertex_descriptor &gt; vertices, const BoostGraph &amp;graph)</argsstring>
        <name>vertex_complement</name>
        <param>
          <type>std::vector&lt; typename boost::graph_traits&lt; BoostGraph &gt;::vertex_descriptor &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>const BoostGraph &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>Given a subset of vertices, return the complement of the subset, i.e. all vertices not contained in the subset. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BoostGraph</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying graph type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of vertices, given as a vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The complement set, returned as a vector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/graph.h" line="180" column="1" bodyfile="src/graph.h" bodystart="180" bodyend="210"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/graph.h" line="17" column="1"/>
  </compounddef>
</doxygen>
