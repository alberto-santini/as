<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceas_1_1details" kind="namespace" language="C++">
    <compoundname>as::details</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceas_1_1details_1aaa1e2c1c370bddd0020956d333bbef26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool as::details::contains</definition>
        <argsstring>(std::false_type, const Container &amp;container, const T &amp;element)</argsstring>
        <name>contains</name>
        <param>
          <type>std::false_type</type>
        </param>
        <param>
          <type>const Container &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers.h" line="39" column="1" bodyfile="src/containers.h" bodystart="39" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespaceas_1_1details_1aa25b4a9ab19e3b807bbd58dc208d2607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool as::details::contains</definition>
        <argsstring>(std::true_type, const Container &amp;container, const T &amp;element)</argsstring>
        <name>contains</name>
        <param>
          <type>std::true_type</type>
        </param>
        <param>
          <type>const Container &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers.h" line="45" column="1" bodyfile="src/containers.h" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespaceas_1_1details_1a2e51ab78c6720ab244aa4cd08c5e7b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Value</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; as::details::iterated_value</definition>
        <argsstring>(const Value &amp;value, std::ostream &amp;out)</argsstring>
        <name>iterated_value</name>
        <param>
          <type>const Value &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers.h" line="73" column="1" bodyfile="src/containers.h" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceas_1_1details_1abb914e2826b38ed8ae4d2f8004843689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Key</type>
          </param>
          <param>
            <type>class Value</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; as::details::iterated_value</definition>
        <argsstring>(const std::pair&lt; Key, Value &gt; &amp;key_val, std::ostream &amp;out)</argsstring>
        <name>iterated_value</name>
        <param>
          <type>const std::pair&lt; Key, Value &gt; &amp;</type>
          <declname>key_val</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers.h" line="79" column="1" bodyfile="src/containers.h" bodystart="79" bodyend="81"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/containers.h" line="36" column="1"/>
  </compounddef>
</doxygen>
